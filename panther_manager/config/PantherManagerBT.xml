<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="Lights">
    <Sequence>
      <Sequence _skipIf="battery_status != POWER_SUPPLY_STATUS_CHARGING \
&amp;&amp; battery_status != POWER_SUPPLY_STATUS_FULL">
        <CallSetLedAnimationService name="SetChargingAnimation"
                                    id="{CHARGING_BATTERY_ANIM_ID}"
                                    param="{battery_percent_round}"
                                    repeating="true"
                                    service_name="lights/controller/set/animation"
                                    timeout="100"
                                    _skipIf="battery_percent_round == charging_anim_percent \
&amp;&amp; current_anim_id == CHARGING_BATTERY_ANIM_ID"
                                    _onSuccess="charging_anim_percent = battery_percent_round; \
current_anim_id = CHARGING_BATTERY_ANIM_ID"/>
        <TickAfterTimeout timeout="20.0"
                          _skipIf="!e_stop_state">
          <CallSetLedAnimationService name="SetEStopAnimation"
                                      id="{E_STOP_ANIM_ID}"
                                      param=""
                                      repeating="false"
                                      service_name="lights/controller/set/animation"
                                      timeout="100"/>
        </TickAfterTimeout>
      </Sequence>
      <Sequence name="Discharging"
                _skipIf="battery_status != POWER_SUPPLY_STATUS_DISCHARGING \
&amp;&amp; battery_status != POWER_SUPPLY_STATUS_NOT_CHARGING">
        <CallSetLedAnimationService name="SetReadyAnimation"
                                    id="{READY_ANIM_ID}"
                                    param=""
                                    repeating="true"
                                    service_name="lights/controller/set/animation"
                                    timeout="100"
                                    _skipIf="e_stop_state || current_anim_id == READY_ANIM_ID"
                                    _onSuccess="current_anim_id = READY_ANIM_ID"/>
        <CallSetLedAnimationService name="SetEStopAnimation"
                                    id="{E_STOP_ANIM_ID}"
                                    param=""
                                    repeating="true"
                                    service_name="lights/controller/set/animation"
                                    timeout="100"
                                    _skipIf="!e_stop_state || current_anim_id == E_STOP_ANIM_ID"
                                    _onSuccess="current_anim_id = E_STOP_ANIM_ID"/>
        <Sequence>
          <TickAfterTimeout timeout="{low_battery_anim_period}"
                            _skipIf="battery_percent &lt; critical_battery_threshold_percent \
|| battery_percent &gt;= low_battery_threshold_percent">
            <CallSetLedAnimationService name="SetLowBatteryAnimation"
                                        id="{LOW_BATTERY_ANIM_ID}"
                                        param=""
                                        repeating="false"
                                        service_name="lights/controller/set/animation"
                                        timeout="100"/>
          </TickAfterTimeout>
          <TickAfterTimeout timeout="{critical_battery_anim_period}"
                            _skipIf="battery_percent &gt;= critical_battery_threshold_percent">
            <CallSetLedAnimationService name="SetCriticalBatteryAnimation"
                                        id="{CRITICAL_BATTERY_ANIM_ID}"
                                        param=""
                                        repeating="false"
                                        service_name="lights/controller/set/animation"
                                        timeout="100"/>
          </TickAfterTimeout>
          <TickAfterTimeout timeout="{battery_state_anim_period}"
                            _skipIf="battery_percent &lt; low_battery_threshold_percent">
            <CallSetLedAnimationService name="SetBatteryStateAnimation"
                                        id="{BATTERY_STATE_ANIM_ID}"
                                        param="{battery_percent_round}"
                                        repeating="false"
                                        service_name="lights/controller/set/animation"
                                        timeout="100"/>
          </TickAfterTimeout>
        </Sequence>
      </Sequence>
      <CallSetLedAnimationService name="SerErrorAnimation"
                                  id="{ERROR_ANIM_ID}"
                                  param=""
                                  repeating="true"
                                  service_name="lights/controller/set/animation"
                                  timeout="100"
                                  _skipIf="battery_status != POWER_SUPPLY_STATUS_UNKNOWN \
|| current_anim_id == ERROR_ANIM_ID"
                                  _onSuccess="current_anim_id = ERROR_ANIM_ID"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="Safety">
    <Sequence>
      <Sequence name="ManagePowerSequence"
                _skipIf="bat_temp &lt;= high_bat_temp">
        <Script name="SignalShutdown"
                code="signal_shutdown := &quot;Battery reached fatal temperature&quot;"
                _skipIf="bat_temp &lt;= fatal_bat_temp"/>
        <Sequence _skipIf="bat_temp &gt; fatal_bat_temp">
          <CallTriggerService name="TriggerEStop"
                              service_name="hardware/e_stop_trigger"
                              timeout="100"
                              _skipIf="e_stop_state"/>
          <CallSetBoolService name="DisableAUX"
                              data="false"
                              service_name="hardware/aux_power_enable"
                              timeout="100"
                              _skipIf="!aux_state || bat_temp &lt;= critical_bat_temp"/>
          <CallSetBoolService name="EnableFan"
                              data="true"
                              service_name="hardware/fan_enable"
                              timeout="100"
                              _skipIf="fan_state"/>
        </Sequence>
      </Sequence>
      <Sequence _skipIf="bat_temp &gt; high_bat_temp">
        <CallSetBoolService name="DisableFan"
                            data="false"
                            service_name="hardware/fan_enable"
                            timeout="100"
                            _skipIf="cpu_temp &gt; cpu_fan_off_temp \
|| driver_temp &gt; driver_fan_off_temp \
|| !fan_state"/>
        <CallSetBoolService name="EnableFan"
                            data="true"
                            service_name="hardware/fan_enable"
                            timeout="100"
                            _skipIf="(cpu_temp &lt;= cpu_fan_on_temp \
&amp;&amp; driver_temp &lt;= driver_fan_on_temp) \
|| fan_state"/>
      </Sequence>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="Shutdown">
    <Sequence>
      <ForceSuccess _while="!shutdown_timeout">
        <ShutdownHostsFromFile shutdown_hosts_file="{shutdown_hosts_file}"/>
      </ForceSuccess>
      <ShutdownSingleHost command=""
                          ip="localhost"
                          user="husarion"/>
    </Sequence>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="CallSetBoolService"
            editable="true">
      <input_port name="data">true / false value</input_port>
      <input_port name="service_name">ROS service name</input_port>
      <input_port name="timeout"
                  default="100">time in ms to wait for service to be active</input_port>
    </Action>
    <Action ID="CallSetLedAnimationService"
            editable="true">
      <input_port name="id">animation ID</input_port>
      <input_port name="param">optional parameter</input_port>
      <input_port name="repeating"
                  default="false">indicates if animation should repeat</input_port>
      <input_port name="service_name">ROS service name</input_port>
      <input_port name="timeout"
                  default="100">time in ms to wait for service to be active</input_port>
    </Action>
    <Action ID="CallTriggerService"
            editable="true">
      <input_port name="service_name">ROS service name</input_port>
      <input_port name="timeout"
                  default="100">timeout in ms to wait for service to be active</input_port>
    </Action>
    <Action ID="ShutdownHostsFromFile"
            editable="true">
      <input_port name="shutdown_hosts_file"/>
    </Action>
    <Action ID="ShutdownSingleHost"
            editable="true">
      <input_port name="command">(optional)</input_port>
      <input_port name="ip"/>
      <input_port name="user"/>
    </Action>
    <Decorator ID="TickAfterTimeout"
               editable="true">
      <input_port name="timeout">time in s to wait before ticking child again</input_port>
    </Decorator>
  </TreeNodesModel>

</root>
