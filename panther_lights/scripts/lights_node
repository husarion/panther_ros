#!/usr/bin/env python3

import rospy
from enum import Enum
from panther_lights.driver import *
from panther_lights.msg import LightsMessage
from panther_lights.srv import SetLights, SetLightsResponse
from panther_lights.srv import SetBrightness, SetBrightnessResponse
from queue import Queue
from threading import Event
import yaml
import logging
import os

# class Modes(Enum):
#     BLINKER_RIGHT = 0
#     BLINKER_LEFT = 1
#     BRAKE_FRONT = 2
#     BRAKE_REAR = 3
#     BRAKE_BOTH = 4
#     NORMAL_FORWARD = 5
#     NORMAL_REVERSING = 6
#     SKID_RIGHT = 7
#     SKID_LEFT = 8
#     ERROR = 9

class LightsNode:
    
    def __init__(self):
        self.stop_notifier = Event()
        self.queue = Queue(10)
        self.lights = None
        self.yaml_data = None
        
    @staticmethod
    def find_config_file():
        paths = os.environ['ROS_PACKAGE_PATH'].split(':')
        for path in paths:
            for entry in os.listdir(path):
                if entry == 'panther_lights':
                    return os.path.join(path, entry, 'config/panther_lights_animations.yaml')
        rospy.logerr('No default configuration file found!')
        return None

    def shutdown_cb(self):
        self.stop_notifier.set()
        self.lights.join()

    def start(self):
        rospy.init_node('lights_node')
        
        # check os.environ for install path
        yaml_file_path = rospy.get_param('~config_file', None)
        if yaml_file_path is None:
            rospy.loginfo("Parameter \"config_file\" not defined. Using default config file.")
            yaml_file_path = LightsNode.find_config_file()
            if yaml_file_path is None:
                exit(1)
        
        with open(yaml_file_path) as file:
            self.yaml_data = yaml.load(file, Loader=yaml.Loader)
            # logging.info(yaml.dump(self.yaml_data))
        
        self.lights = PantherLights(event=self.stop_notifier, queue=self.queue, 
        num_leds = self.yaml_data['num_leds'], brightness = self.yaml_data['global_brightness'])

        rospy.on_shutdown(self.shutdown_cb)
        self.lights.start()
        self.__serv_lights = rospy.Service('set_panther_lights', SetLights, self.set_lights_callback)
        self.__serv_brightness = rospy.Service('set_panther_lights_brightness', SetBrightness, self.set_brightness_callback)

    def set_brightness_callback(self,msg):
        info_str = "Data %f" % msg.brightness
        rospy.loginfo(info_str)

        self.queue.put(PantherLights.BrightnessMessage(
            msg.brightness
        ))

        return SetBrightnessResponse(info_str)

    def set_lights_callback(self, msg):
        info_str = "Data %d" % msg.animation
        rospy.loginfo(info_str)

        for anim in self.yaml_data['animations']:
            if anim['id'] == msg.animation:

                # try to parse colors
                if len(msg.custom_color) != 0:
                    tags = msg.custom_color.split(' ')
                    self.queue.put(PantherLights.AnimationMessage(
                        anim['front']['type'],
                        int(tags[0],base=16),
                        anim['back']['type'],
                        int(tags[1],base=16),
                    ))
                else:
                    self.queue.put(PantherLights.AnimationMessage(
                        anim['front']['type'],
                        anim['front']['color'],
                        anim['back']['type'],
                        anim['back']['color']
                    ))
                break 
        return SetLightsResponse(info_str)        

def main():
    try:
        format = "%(asctime)s: %(message)s"
        logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")
        lights_node = LightsNode()
        lights_node.start()
        rospy.spin()

    except (rospy.ROSInterruptException):
        rospy.signal_shutdown("Interrupt")

if __name__ == "__main__":
    main()
